// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v3.20.3
// source: proto/auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';

export const protobufPackage = 'auth';

export enum Roles {
  ADMIN = 0,
  USER = 1,
  UNRECOGNIZED = -1,
}

export enum OperationTypesStatus {
  OK = 0,
  UNRECOGNIZED = -1,
}

export interface User {
  id: number;
  firstName: string;
  lastName: string;
  email: string;
  password: string;
  role: Roles;
  /** Fecha y hora en formato ISO (o puedes usar google.protobuf.Timestamp) */
  createdAt: string;
  updatedAt: string;
  /** Opcional, puede ser null */
  deletedAt?: string | undefined;
}

export interface CreteUser {
  firstName: string;
  lastName: string;
  email: string;
  password: string;
}

export interface UpdateOneUser {
  firstName: string;
  lastName: string;
}

export interface UserById {
  id: string;
}

export interface OperationStatus {
  status: OperationTypesStatus;
}

export interface PaginationDto {
  page: number;
  limit: number;
}

export interface EmptyArgument {}

export const AUTH_PACKAGE_NAME = 'auth';

export interface UserServiceClient {
  getAllUsers(request: PaginationDto): Observable<User>;

  getUserById(request: UserById): Observable<User>;

  createOneUser(request: CreteUser): Observable<User>;

  updateUser(request: UpdateOneUser): Observable<User>;

  deleteUserById(request: UserById): Observable<OperationStatus>;
}

export interface UserServiceController {
  getAllUsers(request: PaginationDto): Promise<User> | Observable<User> | User;

  getUserById(request: UserById): Promise<User> | Observable<User> | User;

  createOneUser(request: CreteUser): Promise<User> | Observable<User> | User;

  updateUser(request: UpdateOneUser): Promise<User> | Observable<User> | User;

  deleteUserById(
    request: UserById,
  ): Promise<OperationStatus> | Observable<OperationStatus> | OperationStatus;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'getAllUsers',
      'getUserById',
      'createOneUser',
      'updateUser',
      'deleteUserById',
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('UserService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('UserService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const USER_SERVICE_NAME = 'UserService';
